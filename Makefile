# ZTMF Development Environment Makefile

.PHONY: dev-setup dev-up dev-down dev-logs generate-jwt clean help test-empire-data

# Default target
help:
	@echo "ZTMF Development Environment"
	@echo "Usage:"
	@echo "  make dev-setup    Create development docker-compose file and start services"
	@echo "  make dev-up       Start development services"
	@echo "  make dev-down     Stop development services"
	@echo "  make dev-logs     Show service logs"
	@echo "  make generate-jwt Generate JWT token for testing (requires EMAIL variable)"
	@echo "  make test-empire-data Generate JWT tokens for Empire test users"
	@echo "  make clean        Clean up generated files"
	@echo ""
	@echo "Examples:"
	@echo "  make dev-setup                           # Full dev environment setup"
	@echo "  make generate-jwt EMAIL=test@example.com # Generate JWT for specific user"
	@echo "  make test-empire-data                    # Get tokens for Star Wars test users"

# Create compose-dev.yml and start services
dev-setup: backend/compose-dev.yml backend/dev.compose.env
	@echo "üöÄ Starting development environment..."
	cd backend && docker-compose -f compose-dev.yml up -d
	@echo "‚úÖ Development environment ready!"
	@echo "üì° API available at: http://localhost:3000"
	@echo "üóÑÔ∏è  Database available at: localhost:54321"
	@echo ""
	@echo "üß™ Ready to test! Run:"
	@echo "  make test-empire-data    # Get JWT tokens for all test users"
	@echo ""
	@echo "üìã Example API tests:"
	@echo "  # Basic current user info:"
	@echo "  curl -H \"Authorization: TOKEN\" \"http://localhost:3000/api/v1/users/current\""
	@echo ""
	@echo "  # Scores with pillar breakdown (new feature):"
	@echo "  curl -H \"Authorization: TOKEN\" \"http://localhost:3000/api/v1/scores/aggregate?include_pillars=true\""
	@echo ""
	@echo "  # List all FISMA systems:"
	@echo "  curl -H \"Authorization: TOKEN\" \"http://localhost:3000/api/v1/fismasystems\""
	@echo ""
	@echo "üí° Replace TOKEN with output from 'make test-empire-data'"

# Generate the compose-dev.yml file
backend/compose-dev.yml:
	@echo "üìù Creating compose-dev.yml..."
	@echo "# Generated development docker-compose file" > backend/compose-dev.yml
	@echo "# DO NOT EDIT - Managed by Makefile" >> backend/compose-dev.yml
	@echo "" >> backend/compose-dev.yml
	@echo "services:" >> backend/compose-dev.yml
	@echo "  postgre:" >> backend/compose-dev.yml
	@echo "    image: postgres:16.6" >> backend/compose-dev.yml
	@echo "    env_file:" >> backend/compose-dev.yml
	@echo "      - dev.compose.env" >> backend/compose-dev.yml
	@echo "    ports:" >> backend/compose-dev.yml
	@echo "      - \"54321:5432\"" >> backend/compose-dev.yml
	@echo "    volumes:" >> backend/compose-dev.yml
	@echo "      - postgres_data:/var/lib/postgresql/data" >> backend/compose-dev.yml
	@echo "      - ./_test_data_empire.sql:/docker-entrypoint-initdb.d/init.sql:ro" >> backend/compose-dev.yml
	@echo "    healthcheck:" >> backend/compose-dev.yml
	@echo "      test: [\"CMD-SHELL\", \"pg_isready -U admin -d ztmf\"]" >> backend/compose-dev.yml
	@echo "      interval: 5s" >> backend/compose-dev.yml
	@echo "      timeout: 5s" >> backend/compose-dev.yml
	@echo "      retries: 5" >> backend/compose-dev.yml
	@echo "" >> backend/compose-dev.yml
	@echo "  api:" >> backend/compose-dev.yml
	@echo "    image: golang:1.24.1-bookworm" >> backend/compose-dev.yml
	@echo "    command: go run ./cmd/api/..." >> backend/compose-dev.yml
	@echo "    env_file:" >> backend/compose-dev.yml
	@echo "      - dev.compose.env" >> backend/compose-dev.yml
	@echo "    ports:" >> backend/compose-dev.yml
	@echo "      - \"3000:3000\"" >> backend/compose-dev.yml
	@echo "    depends_on:" >> backend/compose-dev.yml
	@echo "      postgre:" >> backend/compose-dev.yml
	@echo "        condition: service_healthy" >> backend/compose-dev.yml
	@echo "    volumes:" >> backend/compose-dev.yml
	@echo "      - .:/app" >> backend/compose-dev.yml
	@echo "    working_dir: /app" >> backend/compose-dev.yml
	@echo "" >> backend/compose-dev.yml
	@echo "volumes:" >> backend/compose-dev.yml
	@echo "  postgres_data:" >> backend/compose-dev.yml
	@echo "‚úÖ compose-dev.yml created"

# Create dev.compose.env for development
backend/dev.compose.env:
	@echo "üìù Creating dev.compose.env for development..."
	@DB_PASSWORD=$$(head /dev/urandom | tr -dc a-zA-Z0-9 | head -c8); \
	echo "# Development environment file - Generated by Makefile" > backend/dev.compose.env; \
	echo "# Passwords are randomly generated each time" >> backend/dev.compose.env; \
	echo "" >> backend/dev.compose.env; \
	echo "# for postgre container" >> backend/dev.compose.env; \
	echo "POSTGRES_DB=ztmf" >> backend/dev.compose.env; \
	echo "POSTGRES_USER=admin" >> backend/dev.compose.env; \
	echo "POSTGRES_PASSWORD=$$DB_PASSWORD" >> backend/dev.compose.env; \
	echo "" >> backend/dev.compose.env; \
	echo "# for api container" >> backend/dev.compose.env; \
	echo "DB_ENDPOINT=postgre" >> backend/dev.compose.env; \
	echo "DB_PORT=5432" >> backend/dev.compose.env; \
	echo "DB_NAME=ztmf" >> backend/dev.compose.env; \
	echo "DB_USER=admin" >> backend/dev.compose.env; \
	echo "DB_PASS=$$DB_PASSWORD" >> backend/dev.compose.env; \
	echo "DB_POPULATE=/app/_test_data_empire.sql" >> backend/dev.compose.env; \
	echo "" >> backend/dev.compose.env; \
	echo "# for api auth handling" >> backend/dev.compose.env; \
	echo "AUTH_HS256_SECRET=zeroTrust" >> backend/dev.compose.env; \
	echo "AUTH_HEADER_FIELD=Authorization" >> backend/dev.compose.env; \
	echo "" >> backend/dev.compose.env; \
	echo "# api server settings" >> backend/dev.compose.env; \
	echo "PORT=3000" >> backend/dev.compose.env; \
	echo "ENVIRONMENT=local" >> backend/dev.compose.env
	@echo "‚úÖ dev.compose.env created with random password"

# Start development services
dev-up: backend/compose-dev.yml backend/dev.compose.env
	@echo "üöÄ Starting development services..."
	cd backend && docker-compose -f compose-dev.yml up -d

# Stop development services  
dev-down:
	@echo "üõë Stopping development services..."
	cd backend && docker-compose -f compose-dev.yml down

# Show service logs
dev-logs:
	cd backend && docker-compose -f compose-dev.yml logs -f

# Generate JWT token for testing
generate-jwt:
	@if [ -z "$(EMAIL)" ]; then \
		echo "‚ùå ERROR: EMAIL variable required"; \
		echo "Usage: make generate-jwt EMAIL=your.email@example.com"; \
		exit 1; \
	fi
	@echo "üîë Generating JWT token for: $(EMAIL)"
	@echo "Header (base64):"
	@echo -n '{"alg":"HS256"}' | openssl base64 -A | tr '+/' '-_' | tr -d '='
	@echo ""
	@echo "Payload (base64):"
	@echo -n '{"email":"$(EMAIL)"}' | openssl base64 -A | tr '+/' '-_' | tr -d '='
	@echo ""
	@echo "Signature:"
	@HEADER=$$(echo -n '{"alg":"HS256"}' | openssl base64 -A | tr '+/' '-_' | tr -d '='); \
	PAYLOAD=$$(echo -n '{"email":"$(EMAIL)"}' | openssl base64 -A | tr '+/' '-_' | tr -d '='); \
	SIGNATURE=$$(echo -n "$$HEADER.$$PAYLOAD" | openssl dgst -sha256 -hmac 'zeroTrust' -binary | openssl base64 -A | tr '+/' '-_' | tr -d '='); \
	echo "$$SIGNATURE"
	@echo ""
	@echo "üéØ Complete JWT Token:"
	@HEADER=$$(echo -n '{"alg":"HS256"}' | openssl base64 -A | tr '+/' '-_' | tr -d '='); \
	PAYLOAD=$$(echo -n '{"email":"$(EMAIL)"}' | openssl base64 -A | tr '+/' '-_' | tr -d '='); \
	SIGNATURE=$$(echo -n "$$HEADER.$$PAYLOAD" | openssl dgst -sha256 -hmac 'zeroTrust' -binary | openssl base64 -A | tr '+/' '-_' | tr -d '='); \
	echo "$$HEADER.$$PAYLOAD.$$SIGNATURE"
	@echo ""
	@echo "üìã Test with curl:"
	@HEADER=$$(echo -n '{"alg":"HS256"}' | openssl base64 -A | tr '+/' '-_' | tr -d '='); \
	PAYLOAD=$$(echo -n '{"email":"$(EMAIL)"}' | openssl base64 -A | tr '+/' '-_' | tr -d '='); \
	SIGNATURE=$$(echo -n "$$HEADER.$$PAYLOAD" | openssl dgst -sha256 -hmac 'zeroTrust' -binary | openssl base64 -A | tr '+/' '-_' | tr -d '='); \
	echo "curl -H \"Authorization: $$HEADER.$$PAYLOAD.$$SIGNATURE\" \"http://localhost:3000/api/v1/users/current\""

# Generate JWT tokens for Empire test users
test-empire-data:
	@echo "üè¥ Imperial Test Users and JWT Tokens"
	@echo ""
	@echo "üëë ADMIN - Grand Moff Tarkin:"
	@HEADER=$$(echo -n '{"alg":"HS256"}' | openssl base64 -A | tr '+/' '-_' | tr -d '='); \
	PAYLOAD=$$(echo -n '{"email":"Grand.Moff@DeathStar.Empire"}' | openssl base64 -A | tr '+/' '-_' | tr -d '='); \
	SIGNATURE=$$(echo -n "$$HEADER.$$PAYLOAD" | openssl dgst -sha256 -hmac 'zeroTrust' -binary | openssl base64 -A | tr '+/' '-_' | tr -d '='); \
	echo "  EMAIL: Grand.Moff@DeathStar.Empire"; \
	echo "  TOKEN: $$HEADER.$$PAYLOAD.$$SIGNATURE"
	@echo ""
	@echo "üö¢ ISSO - Admiral Piett (Executor Systems):"
	@HEADER=$$(echo -n '{"alg":"HS256"}' | openssl base64 -A | tr '+/' '-_' | tr -d '='); \
	PAYLOAD=$$(echo -n '{"email":"Admiral.Piett@executor.empire"}' | openssl base64 -A | tr '+/' '-_' | tr -d '='); \
	SIGNATURE=$$(echo -n "$$HEADER.$$PAYLOAD" | openssl dgst -sha256 -hmac 'zeroTrust' -binary | openssl base64 -A | tr '+/' '-_' | tr -d '='); \
	echo "  EMAIL: Admiral.Piett@executor.empire"; \
	echo "  TOKEN: $$HEADER.$$PAYLOAD.$$SIGNATURE"
	@echo ""
	@echo "‚ùÑÔ∏è  ISSO - General Veers (Death Star Systems):"
	@HEADER=$$(echo -n '{"alg":"HS256"}' | openssl base64 -A | tr '+/' '-_' | tr -d '='); \
	PAYLOAD=$$(echo -n '{"email":"Commander.Veers@hoth.empire"}' | openssl base64 -A | tr '+/' '-_' | tr -d '='); \
	SIGNATURE=$$(echo -n "$$HEADER.$$PAYLOAD" | openssl dgst -sha256 -hmac 'zeroTrust' -binary | openssl base64 -A | tr '+/' '-_' | tr -d '='); \
	echo "  EMAIL: Commander.Veers@hoth.empire"; \
	echo "  TOKEN: $$HEADER.$$PAYLOAD.$$SIGNATURE"
	@echo ""
	@echo "üõ°Ô∏è  ISSO - Director Krennic (Shield Generator Systems):"
	@HEADER=$$(echo -n '{"alg":"HS256"}' | openssl base64 -A | tr '+/' '-_' | tr -d '='); \
	PAYLOAD=$$(echo -n '{"email":"Director.Krennic@scarif.empire"}' | openssl base64 -A | tr '+/' '-_' | tr -d '='); \
	SIGNATURE=$$(echo -n "$$HEADER.$$PAYLOAD" | openssl dgst -sha256 -hmac 'zeroTrust' -binary | openssl base64 -A | tr '+/' '-_' | tr -d '='); \
	echo "  EMAIL: Director.Krennic@scarif.empire"; \
	echo "  TOKEN: $$HEADER.$$PAYLOAD.$$SIGNATURE"
	@echo ""
	@echo "üìã Test with pillar scores:"
	@HEADER=$$(echo -n '{"alg":"HS256"}' | openssl base64 -A | tr '+/' '-_' | tr -d '='); \
	PAYLOAD=$$(echo -n '{"email":"Grand.Moff@DeathStar.Empire"}' | openssl base64 -A | tr '+/' '-_' | tr -d '='); \
	SIGNATURE=$$(echo -n "$$HEADER.$$PAYLOAD" | openssl dgst -sha256 -hmac 'zeroTrust' -binary | openssl base64 -A | tr '+/' '-_' | tr -d '='); \
	echo "curl -H \"Authorization: $$HEADER.$$PAYLOAD.$$SIGNATURE\" \"http://localhost:3000/api/v1/scores/aggregate?include_pillars=true\""

# Clean up generated files
clean:
	@echo "üßπ Cleaning up generated files..."
	@rm -f backend/compose-dev.yml backend/dev.compose.env
	@echo "‚úÖ Clean complete"