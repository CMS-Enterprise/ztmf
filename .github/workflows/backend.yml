name: Backend

on:
  workflow_call:
    inputs:
      environment:
        type: string
        description: environment to deploy to
        required: true
        
jobs:
  build:
    name: Build and Smoke Test
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    outputs:
      shaShort: ${{ steps.revParse.outputs.shaShort }}
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Get Commit SHA
        id: revParse
        run: echo "shaShort=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      
      - name: Docker - Build
        run: docker buildx build --platform linux/amd64 --tag ${{ secrets.ECR_REPO_URL }}:${{ steps.revParse.outputs.shaShort }} --load ./backend 

      - name: Snyk - Test Image
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: "${{ secrets.ECR_REPO_URL }}:${{ steps.revParse.outputs.shaShort }}"
          args: --severity-threshold=high --file=./backend/Dockerfile --policy-path=./backend/.snyk
      
      - name: Start API and Postgres Containers
        uses: hoverkraft-tech/compose-action@v2.0.2
        with:
          compose-file: ./backend/actions-compose.yml
        env:
          API_IMAGE_URI: "${{ secrets.ECR_REPO_URL }}:${{ steps.revParse.outputs.shaShort }}"
          
          # for postgre container
          POSTGRES_DB: ztmf
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: localDev

          # for api container and debug launch config
          PORT: 8080
          DB_ENDPOINT: localhost
          DB_PORT: 5432
          DB_NAME: ztmf
          DB_USER: admin
          DB_PASS: localDev 
          DB_POPULATE: "/src/backend/_test_data.sql"
          AUTH_HS256_SECRET: "zeroTrust"
          AUTH_HEADER_FIELD: "Authorization"
          WORKSPACE: ${{ github.workspace }}


      
      - name: Smoke test
        uses: aquia-inc/emberfall@main
        with:
          version: 0.2.0
          config: | 
            ---
            commonHeaders: &commonHeaders
              authorization: "eyJhbGciOiJIUzI1NiJ9.eyJlbWFpbCI6InRlc3QudXNlckBub3doZXJlLnh5eiJ9.zmgPiVjkLNzh4sl9uD_KAR28bd___-OlLhHsXWQNSC4"
            tests:  
              - url: http://localhost:8080/api/v1/users/current
                method: GET
                expect:
                  status: 401
                  body: "unauthorized"
              
              - url: http://localhost:8080/api/v1/users/current
                method: GET
                headers:
                  <<: *commonHeaders
                expect:
                  status: 200
                  headers:
                    content-type: "application/json"
              
              - url: http://localhost:8080/api/v1/fismasystems
                method: GET
                headers:
                  <<: *commonHeaders
                expect:
                  status: 200
                  headers:
                    content-type: "application/json"
              
              - url: http://localhost:8080/api/v1/functions
                method: GET
                headers:
                  <<: *commonHeaders
                expect:
                  status: 200
                  headers:
                    content-type: "application/json"
              
              - url: http://localhost:8080/api/v1/functions/1
                method: GET
                headers:
                  <<: *commonHeaders
                expect:
                  status: 200
                  headers:
                    content-type: "application/json"

      - name: AWS - Get Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ROLEARN }}
          role-duration-seconds: 900
          aws-region: us-east-1
              
      - name: Docker - Login
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REPO_URL }}
  
      - name: Docker - Push
        run: docker push ${{ secrets.ECR_REPO_URL }}:${{ steps.revParse.outputs.shaShort }}
        
      - name: AWS - SSM Put Parameter
        run: aws ssm put-parameter --name ${{ secrets.PARAMETER_NAME }} --value ${{ steps.revParse.outputs.shaShort }} --overwrite

      # Deployment of the latest image will happen with terraform apply during infrastructure deploy
