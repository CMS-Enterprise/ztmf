name: Backend

on:
  workflow_call:
    inputs:
      environment:
        type: string
        description: environment to deploy to
        required: true
        
jobs:
  build:
    name: Build and Smoke Test
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    outputs:
      shaShort: ${{ steps.revParse.outputs.shaShort }}
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Get Commit SHA
        id: revParse
        run: echo "shaShort=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      
      - name: Docker - Build
        run: docker buildx build --platform linux/amd64 --tag ${{ secrets.ECR_REPO_URL }}:${{ steps.revParse.outputs.shaShort }} --load ./backend 

      - name: Snyk - Test Image
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: "${{ secrets.ECR_REPO_URL }}:${{ steps.revParse.outputs.shaShort }}"
          args: --severity-threshold=high --file=./backend/Dockerfile --policy-path=./backend/.snyk
      
      - name: Start API and Postgres Containers
        uses: hoverkraft-tech/compose-action@v2.0.2
        with:
          compose-file: ./backend/actions-compose.yml
        env:
          API_IMAGE_URI: "${{ secrets.ECR_REPO_URL }}:${{ steps.revParse.outputs.shaShort }}"
          
          # for postgre container
          POSTGRES_DB: ztmf
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: localDev

          # for api container and debug launch config
          PORT: 8080
          DB_ENDPOINT: localhost
          DB_PORT: 5432
          DB_NAME: ztmf
          DB_USER: admin
          DB_PASS: localDev 
          DB_POPULATE: "/src/backend/_test_data.sql"
          AUTH_HS256_SECRET: "zeroTrust"
          AUTH_HEADER_FIELD: "Authorization"
          WORKSPACE: ${{ github.workspace }}

      - name: Emberfall Smoke Tests
        uses: aquia-inc/emberfall@main
        with:
          version: 0.3.1
          file: ./backend/emberfall_tests.yml

      - name: AWS - Get Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ROLEARN }}
          role-duration-seconds: 900
          aws-region: us-east-1
              
      - name: Docker - Login
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REPO_URL }}
  
      - name: Docker - Push
        run: docker push ${{ secrets.ECR_REPO_URL }}:${{ steps.revParse.outputs.shaShort }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.1'

      - name: Lambda - Build
        run: |
          cd backend
          echo "Building Lambda function for Linux..."
          GOOS=linux GOARCH=amd64 go build -o bootstrap ./cmd/lambda/.
          echo "Creating Lambda deployment package..."
          zip lambda-deployment-${{ steps.revParse.outputs.shaShort }}.zip bootstrap
          ls -la lambda-deployment-${{ steps.revParse.outputs.shaShort }}.zip

      - name: Lambda - Upload to S3
        run: |
          # Get the S3 bucket name from SSM parameter
          LAMBDA_BUCKET=$(aws ssm get-parameter --name "/ztmf/${{ inputs.environment }}/lambda/data-sync/deployment-bucket" --query 'Parameter.Value' --output text)
          echo "Uploading Lambda package to bucket: $LAMBDA_BUCKET"
          
          # Upload with commit SHA tag
          aws s3 cp backend/lambda-deployment-${{ steps.revParse.outputs.shaShort }}.zip s3://$LAMBDA_BUCKET/lambda-deployment-${{ steps.revParse.outputs.shaShort }}.zip
          
          # Update the latest symlink
          aws s3 cp backend/lambda-deployment-${{ steps.revParse.outputs.shaShort }}.zip s3://$LAMBDA_BUCKET/lambda-deployment-latest.zip
          
          echo "Lambda deployment package uploaded successfully"

      - name: Lambda - Update Function Code
        run: |
          # Get the Lambda function name from SSM parameter
          LAMBDA_FUNCTION=$(aws ssm get-parameter --name "/ztmf/${{ inputs.environment }}/lambda/data-sync/function-name" --query 'Parameter.Value' --output text)
          LAMBDA_BUCKET=$(aws ssm get-parameter --name "/ztmf/${{ inputs.environment }}/lambda/data-sync/deployment-bucket" --query 'Parameter.Value' --output text)
          
          echo "Updating Lambda function: $LAMBDA_FUNCTION"
          echo "Using deployment package: s3://$LAMBDA_BUCKET/lambda-deployment-${{ steps.revParse.outputs.shaShort }}.zip"
          
          # Update Lambda function code
          aws lambda update-function-code \
            --function-name $LAMBDA_FUNCTION \
            --s3-bucket $LAMBDA_BUCKET \
            --s3-key lambda-deployment-${{ steps.revParse.outputs.shaShort }}.zip
          
          echo "Lambda function updated successfully"
        
      - name: AWS - SSM Put Parameter
        run: aws ssm put-parameter --name ${{ secrets.PARAMETER_NAME }} --value ${{ steps.revParse.outputs.shaShort }} --overwrite

      # Deployment of the latest image will happen with terraform apply during infrastructure deploy
